// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Builder API Documentation
 *
 * This is the documentation for the Builder API service.
 *
 * API version: 2.0
 * Contact: support@swagger.io
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CompilationAPIController binds http requests to an api service and writes the service results to the http response
type CompilationAPIController struct {
	service CompilationAPIServicer
	errorHandler ErrorHandler
}

// CompilationAPIOption for how the controller is set up.
type CompilationAPIOption func(*CompilationAPIController)

// WithCompilationAPIErrorHandler inject ErrorHandler into controller
func WithCompilationAPIErrorHandler(h ErrorHandler) CompilationAPIOption {
	return func(c *CompilationAPIController) {
		c.errorHandler = h
	}
}

// NewCompilationAPIController creates a default api controller
func NewCompilationAPIController(s CompilationAPIServicer, opts ...CompilationAPIOption) *CompilationAPIController {
	controller := &CompilationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CompilationAPIController
func (c *CompilationAPIController) Routes() Routes {
	return Routes{
		"CompilationsIdArtifactsGet": Route{
			strings.ToUpper("Get"),
			"/v1/compilations/{id}/artifacts",
			c.CompilationsIdArtifactsGet,
		},
		"CompilationsIdCancelPost": Route{
			strings.ToUpper("Post"),
			"/v1/compilations/{id}/cancel",
			c.CompilationsIdCancelPost,
		},
		"CompilationsIdGet": Route{
			strings.ToUpper("Get"),
			"/v1/compilations/{id}",
			c.CompilationsIdGet,
		},
		"CompilationsIdLogsGet": Route{
			strings.ToUpper("Get"),
			"/v1/compilations/{id}/logs",
			c.CompilationsIdLogsGet,
		},
		"CompilationsPost": Route{
			strings.ToUpper("Post"),
			"/v1/compilations",
			c.CompilationsPost,
		},
	}
}

// CompilationsIdArtifactsGet - Get the compilation arfitacts
func (c *CompilationAPIController) CompilationsIdArtifactsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var type_Param string
	if query.Has("type") {
		param := query.Get("type")

		type_Param = param
	} else {
	}
	result, err := c.service.CompilationsIdArtifactsGet(r.Context(), idParam, type_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CompilationsIdCancelPost - Stop a compilation
func (c *CompilationAPIController) CompilationsIdCancelPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.CompilationsIdCancelPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CompilationsIdGet - Get the status of a compilation
func (c *CompilationAPIController) CompilationsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.CompilationsIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CompilationsIdLogsGet - Get the compilation logs
func (c *CompilationAPIController) CompilationsIdLogsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.CompilationsIdLogsGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CompilationsPost - Add a new compilation
func (c *CompilationAPIController) CompilationsPost(w http.ResponseWriter, r *http.Request) {
	valueParam := HandlerCompilation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&valueParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHandlerCompilationRequired(valueParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHandlerCompilationConstraints(valueParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CompilationsPost(r.Context(), valueParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
