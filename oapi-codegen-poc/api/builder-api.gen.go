//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240505103949-a8119c1b09d4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// HandlerAliveResponse AliveResponse represents a response for the alive endpoint
type HandlerAliveResponse struct {
	Message *string `json:"message,omitempty"`
}

// HandlerArtifactResponse ArtifactResponse represents a response for a compilation artifacts request
type HandlerArtifactResponse struct {
	Bin  *string `json:"bin,omitempty"`
	Elf  *string `json:"elf,omitempty"`
	Hex  *string `json:"hex,omitempty"`
	Name *string `json:"name,omitempty"`
}

// HandlerCompilation Compilation represents a compilation request
type HandlerCompilation struct {
	Fqbn *string `json:"fqbn,omitempty"`
	Ota  *bool   `json:"ota,omitempty"`

	// Sketch Path	string `json:"path"`
	Sketch  *HandlerSketch `json:"sketch,omitempty"`
	Verbose *bool          `json:"verbose,omitempty"`
}

// HandlerCompilationResponse CompilationResponse represents a response for a compilation request
type HandlerCompilationResponse struct {
	Id     *string `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
}

// HandlerErrBadRequestResponse ErrBadRequestResponse represents a bad request response
type HandlerErrBadRequestResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrForbiddenResponse ErrForbiddenResponse represents a forbidden response
type HandlerErrForbiddenResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrGoneResponse ErrGoneResponse represents a gone response
type HandlerErrGoneResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrInternalServerErrorResponse ErrInternalServerErrorResponse represents an internal server error response
type HandlerErrInternalServerErrorResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrMethodNotAllowedResponse ErrMethodNotAllowedResponse represents a method not allowed response
type HandlerErrMethodNotAllowedResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrNotFoundResponse ErrNotFoundResponse represents a not found response
type HandlerErrNotFoundResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrRateLimitExceededResponse ErrRateLimitExceededResponse represents a rate limit exceeded response
type HandlerErrRateLimitExceededResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrServiceUnavailableResponse ErrServiceUnavailableResponse represents a service unavailable response
type HandlerErrServiceUnavailableResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrUnauthorizedResponse ErrUnauthorizedResponse represents an unauthorized response
type HandlerErrUnauthorizedResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerFile File represents a file to be compiled
type HandlerFile struct {
	Data *string `json:"data,omitempty"`
	Name *string `json:"name,omitempty"`
}

// HandlerIncludedLibraries IncludedLibraries represents the libraries to be included in the compilation
type HandlerIncludedLibraries struct {
	IncludedLibs *[]HandlerLibrary `json:"included_libs,omitempty"`
}

// HandlerLibrary Library represents a library to be included in the compilation
type HandlerLibrary struct {
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// HandlerLogsResponse LogsResponse represents a response for a compilation logs request
type HandlerLogsResponse struct {
	Stderr *string `json:"stderr,omitempty"`
	Stdout *string `json:"stdout,omitempty"`
}

// HandlerSketch Sketch represents a sketch to be compiled
type HandlerSketch struct {
	Files *[]HandlerFile `json:"files,omitempty"`

	// Ino File represents a file to be compiled
	Ino *HandlerFile `json:"ino,omitempty"`

	// Metadata IncludedLibraries represents the libraries to be included in the compilation
	Metadata *HandlerIncludedLibraries `json:"metadata,omitempty"`
	Name     *string                   `json:"name,omitempty"`
}

// GetCompilationsIdArtifactsParams defines parameters for GetCompilationsIdArtifacts.
type GetCompilationsIdArtifactsParams struct {
	// Type Type of artifact we want to retrieve: bin, elf, hex
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// PostCompilationsJSONRequestBody defines body for PostCompilations for application/json ContentType.
type PostCompilationsJSONRequestBody = HandlerCompilation

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the status of the server
	// (GET /alive)
	GetAlive(w http.ResponseWriter, r *http.Request)
	// Add a new compilation
	// (POST /compilations)
	PostCompilations(w http.ResponseWriter, r *http.Request)
	// Get the status of a compilation
	// (GET /compilations/{id})
	GetCompilationsId(w http.ResponseWriter, r *http.Request, id string)
	// Get the compilation arfitacts
	// (GET /compilations/{id}/artifacts)
	GetCompilationsIdArtifacts(w http.ResponseWriter, r *http.Request, id string, params GetCompilationsIdArtifactsParams)
	// Stop a compilation
	// (POST /compilations/{id}/cancel)
	PostCompilationsIdCancel(w http.ResponseWriter, r *http.Request, id string)
	// Get the compilation logs
	// (GET /compilations/{id}/logs)
	GetCompilationsIdLogs(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAlive operation middleware
func (siw *ServerInterfaceWrapper) GetAlive(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlive(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCompilations operation middleware
func (siw *ServerInterfaceWrapper) PostCompilations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCompilations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompilationsId operation middleware
func (siw *ServerInterfaceWrapper) GetCompilationsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompilationsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompilationsIdArtifacts operation middleware
func (siw *ServerInterfaceWrapper) GetCompilationsIdArtifacts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompilationsIdArtifactsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompilationsIdArtifacts(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCompilationsIdCancel operation middleware
func (siw *ServerInterfaceWrapper) PostCompilationsIdCancel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCompilationsIdCancel(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCompilationsIdLogs operation middleware
func (siw *ServerInterfaceWrapper) GetCompilationsIdLogs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCompilationsIdLogs(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/alive", wrapper.GetAlive)
	m.HandleFunc("POST "+options.BaseURL+"/compilations", wrapper.PostCompilations)
	m.HandleFunc("GET "+options.BaseURL+"/compilations/{id}", wrapper.GetCompilationsId)
	m.HandleFunc("GET "+options.BaseURL+"/compilations/{id}/artifacts", wrapper.GetCompilationsIdArtifacts)
	m.HandleFunc("POST "+options.BaseURL+"/compilations/{id}/cancel", wrapper.PostCompilationsIdCancel)
	m.HandleFunc("GET "+options.BaseURL+"/compilations/{id}/logs", wrapper.GetCompilationsIdLogs)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
