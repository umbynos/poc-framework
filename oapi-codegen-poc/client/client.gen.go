// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240505103949-a8119c1b09d4 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// HandlerAliveResponse AliveResponse represents a response for the alive endpoint
type HandlerAliveResponse struct {
	Message *string `json:"message,omitempty"`
}

// HandlerArtifactResponse ArtifactResponse represents a response for a compilation artifacts request
type HandlerArtifactResponse struct {
	Bin  *string `json:"bin,omitempty"`
	Elf  *string `json:"elf,omitempty"`
	Hex  *string `json:"hex,omitempty"`
	Name *string `json:"name,omitempty"`
}

// HandlerCompilation Compilation represents a compilation request
type HandlerCompilation struct {
	Fqbn *string `json:"fqbn,omitempty"`
	Ota  *bool   `json:"ota,omitempty"`

	// Sketch Path	string `json:"path"`
	Sketch  *HandlerSketch `json:"sketch,omitempty"`
	Verbose *bool          `json:"verbose,omitempty"`
}

// HandlerCompilationResponse CompilationResponse represents a response for a compilation request
type HandlerCompilationResponse struct {
	Id     *string `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
}

// HandlerErrBadRequestResponse ErrBadRequestResponse represents a bad request response
type HandlerErrBadRequestResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrForbiddenResponse ErrForbiddenResponse represents a forbidden response
type HandlerErrForbiddenResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrGoneResponse ErrGoneResponse represents a gone response
type HandlerErrGoneResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrInternalServerErrorResponse ErrInternalServerErrorResponse represents an internal server error response
type HandlerErrInternalServerErrorResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrMethodNotAllowedResponse ErrMethodNotAllowedResponse represents a method not allowed response
type HandlerErrMethodNotAllowedResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrNotFoundResponse ErrNotFoundResponse represents a not found response
type HandlerErrNotFoundResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrRateLimitExceededResponse ErrRateLimitExceededResponse represents a rate limit exceeded response
type HandlerErrRateLimitExceededResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrServiceUnavailableResponse ErrServiceUnavailableResponse represents a service unavailable response
type HandlerErrServiceUnavailableResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerErrUnauthorizedResponse ErrUnauthorizedResponse represents an unauthorized response
type HandlerErrUnauthorizedResponse struct {
	Err *string `json:"err,omitempty"`
}

// HandlerFile File represents a file to be compiled
type HandlerFile struct {
	Data *string `json:"data,omitempty"`
	Name *string `json:"name,omitempty"`
}

// HandlerIncludedLibraries IncludedLibraries represents the libraries to be included in the compilation
type HandlerIncludedLibraries struct {
	IncludedLibs *[]HandlerLibrary `json:"included_libs,omitempty"`
}

// HandlerLibrary Library represents a library to be included in the compilation
type HandlerLibrary struct {
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// HandlerLogsResponse LogsResponse represents a response for a compilation logs request
type HandlerLogsResponse struct {
	Stderr *string `json:"stderr,omitempty"`
	Stdout *string `json:"stdout,omitempty"`
}

// HandlerSketch Sketch represents a sketch to be compiled
type HandlerSketch struct {
	Files *[]HandlerFile `json:"files,omitempty"`

	// Ino File represents a file to be compiled
	Ino *HandlerFile `json:"ino,omitempty"`

	// Metadata IncludedLibraries represents the libraries to be included in the compilation
	Metadata *HandlerIncludedLibraries `json:"metadata,omitempty"`
	Name     *string                   `json:"name,omitempty"`
}

// GetCompilationsIdArtifactsParams defines parameters for GetCompilationsIdArtifacts.
type GetCompilationsIdArtifactsParams struct {
	// Type Type of artifact we want to retrieve: bin, elf, hex
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// PostCompilationsJSONRequestBody defines body for PostCompilations for application/json ContentType.
type PostCompilationsJSONRequestBody = HandlerCompilation

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAlive request
	GetAlive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCompilationsWithBody request with any body
	PostCompilationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCompilations(ctx context.Context, body PostCompilationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompilationsId request
	GetCompilationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompilationsIdArtifacts request
	GetCompilationsIdArtifacts(ctx context.Context, id string, params *GetCompilationsIdArtifactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCompilationsIdCancel request
	PostCompilationsIdCancel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompilationsIdLogs request
	GetCompilationsIdLogs(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAlive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAliveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompilationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompilationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompilations(ctx context.Context, body PostCompilationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompilationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompilationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompilationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompilationsIdArtifacts(ctx context.Context, id string, params *GetCompilationsIdArtifactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompilationsIdArtifactsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompilationsIdCancel(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompilationsIdCancelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompilationsIdLogs(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompilationsIdLogsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAliveRequest generates requests for GetAlive
func NewGetAliveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCompilationsRequest calls the generic PostCompilations builder with application/json body
func NewPostCompilationsRequest(server string, body PostCompilationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCompilationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCompilationsRequestWithBody generates requests for PostCompilations with any type of body
func NewPostCompilationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compilations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompilationsIdRequest generates requests for GetCompilationsId
func NewGetCompilationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compilations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompilationsIdArtifactsRequest generates requests for GetCompilationsIdArtifacts
func NewGetCompilationsIdArtifactsRequest(server string, id string, params *GetCompilationsIdArtifactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compilations/%s/artifacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCompilationsIdCancelRequest generates requests for PostCompilationsIdCancel
func NewPostCompilationsIdCancelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compilations/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompilationsIdLogsRequest generates requests for GetCompilationsIdLogs
func NewGetCompilationsIdLogsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compilations/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAliveWithResponse request
	GetAliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAliveResponse, error)

	// PostCompilationsWithBodyWithResponse request with any body
	PostCompilationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompilationsResponse, error)

	PostCompilationsWithResponse(ctx context.Context, body PostCompilationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompilationsResponse, error)

	// GetCompilationsIdWithResponse request
	GetCompilationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCompilationsIdResponse, error)

	// GetCompilationsIdArtifactsWithResponse request
	GetCompilationsIdArtifactsWithResponse(ctx context.Context, id string, params *GetCompilationsIdArtifactsParams, reqEditors ...RequestEditorFn) (*GetCompilationsIdArtifactsResponse, error)

	// PostCompilationsIdCancelWithResponse request
	PostCompilationsIdCancelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCompilationsIdCancelResponse, error)

	// GetCompilationsIdLogsWithResponse request
	GetCompilationsIdLogsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCompilationsIdLogsResponse, error)
}

type GetAliveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerAliveResponse
	JSON400      *HandlerErrBadRequestResponse
	JSON405      *HandlerErrMethodNotAllowedResponse
	JSON500      *HandlerErrInternalServerErrorResponse
	JSON503      *HandlerErrServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r GetAliveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAliveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCompilationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HandlerCompilationResponse
	JSON400      *HandlerErrBadRequestResponse
	JSON401      *HandlerErrUnauthorizedResponse
	JSON403      *HandlerErrForbiddenResponse
	JSON405      *HandlerErrMethodNotAllowedResponse
	JSON429      *HandlerErrRateLimitExceededResponse
	JSON500      *HandlerErrInternalServerErrorResponse
	JSON503      *HandlerErrServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r PostCompilationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCompilationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompilationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerCompilationResponse
	JSON400      *HandlerErrBadRequestResponse
	JSON401      *HandlerErrUnauthorizedResponse
	JSON403      *HandlerErrForbiddenResponse
	JSON404      *HandlerErrNotFoundResponse
	JSON405      *HandlerErrMethodNotAllowedResponse
	JSON410      *HandlerErrGoneResponse
	JSON429      *HandlerErrRateLimitExceededResponse
	JSON500      *HandlerErrInternalServerErrorResponse
	JSON503      *HandlerErrServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r GetCompilationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompilationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompilationsIdArtifactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerArtifactResponse
	JSON400      *HandlerErrBadRequestResponse
	JSON401      *HandlerErrUnauthorizedResponse
	JSON403      *HandlerErrForbiddenResponse
	JSON404      *HandlerErrNotFoundResponse
	JSON405      *HandlerErrMethodNotAllowedResponse
	JSON410      *HandlerErrGoneResponse
	JSON429      *HandlerErrRateLimitExceededResponse
	JSON500      *HandlerErrInternalServerErrorResponse
	JSON503      *HandlerErrServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r GetCompilationsIdArtifactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompilationsIdArtifactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCompilationsIdCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerCompilationResponse
	JSON400      *HandlerErrBadRequestResponse
	JSON401      *HandlerErrUnauthorizedResponse
	JSON403      *HandlerErrForbiddenResponse
	JSON404      *HandlerErrNotFoundResponse
	JSON405      *HandlerErrMethodNotAllowedResponse
	JSON410      *HandlerErrGoneResponse
	JSON429      *HandlerErrRateLimitExceededResponse
	JSON500      *HandlerErrInternalServerErrorResponse
	JSON503      *HandlerErrServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r PostCompilationsIdCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCompilationsIdCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompilationsIdLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HandlerLogsResponse
	JSON400      *HandlerErrBadRequestResponse
	JSON401      *HandlerErrUnauthorizedResponse
	JSON403      *HandlerErrForbiddenResponse
	JSON404      *HandlerErrNotFoundResponse
	JSON405      *HandlerErrMethodNotAllowedResponse
	JSON410      *HandlerErrGoneResponse
	JSON429      *HandlerErrRateLimitExceededResponse
	JSON500      *HandlerErrInternalServerErrorResponse
	JSON503      *HandlerErrServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r GetCompilationsIdLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompilationsIdLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAliveWithResponse request returning *GetAliveResponse
func (c *ClientWithResponses) GetAliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAliveResponse, error) {
	rsp, err := c.GetAlive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAliveResponse(rsp)
}

// PostCompilationsWithBodyWithResponse request with arbitrary body returning *PostCompilationsResponse
func (c *ClientWithResponses) PostCompilationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompilationsResponse, error) {
	rsp, err := c.PostCompilationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompilationsResponse(rsp)
}

func (c *ClientWithResponses) PostCompilationsWithResponse(ctx context.Context, body PostCompilationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompilationsResponse, error) {
	rsp, err := c.PostCompilations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompilationsResponse(rsp)
}

// GetCompilationsIdWithResponse request returning *GetCompilationsIdResponse
func (c *ClientWithResponses) GetCompilationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCompilationsIdResponse, error) {
	rsp, err := c.GetCompilationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompilationsIdResponse(rsp)
}

// GetCompilationsIdArtifactsWithResponse request returning *GetCompilationsIdArtifactsResponse
func (c *ClientWithResponses) GetCompilationsIdArtifactsWithResponse(ctx context.Context, id string, params *GetCompilationsIdArtifactsParams, reqEditors ...RequestEditorFn) (*GetCompilationsIdArtifactsResponse, error) {
	rsp, err := c.GetCompilationsIdArtifacts(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompilationsIdArtifactsResponse(rsp)
}

// PostCompilationsIdCancelWithResponse request returning *PostCompilationsIdCancelResponse
func (c *ClientWithResponses) PostCompilationsIdCancelWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostCompilationsIdCancelResponse, error) {
	rsp, err := c.PostCompilationsIdCancel(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompilationsIdCancelResponse(rsp)
}

// GetCompilationsIdLogsWithResponse request returning *GetCompilationsIdLogsResponse
func (c *ClientWithResponses) GetCompilationsIdLogsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCompilationsIdLogsResponse, error) {
	rsp, err := c.GetCompilationsIdLogs(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompilationsIdLogsResponse(rsp)
}

// ParseGetAliveResponse parses an HTTP response from a GetAliveWithResponse call
func ParseGetAliveResponse(rsp *http.Response) (*GetAliveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAliveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerAliveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HandlerErrBadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest HandlerErrMethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HandlerErrInternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest HandlerErrServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostCompilationsResponse parses an HTTP response from a PostCompilationsWithResponse call
func ParsePostCompilationsResponse(rsp *http.Response) (*PostCompilationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCompilationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HandlerCompilationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HandlerErrBadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HandlerErrUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HandlerErrForbiddenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest HandlerErrMethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest HandlerErrRateLimitExceededResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HandlerErrInternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest HandlerErrServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetCompilationsIdResponse parses an HTTP response from a GetCompilationsIdWithResponse call
func ParseGetCompilationsIdResponse(rsp *http.Response) (*GetCompilationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompilationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerCompilationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HandlerErrBadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HandlerErrUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HandlerErrForbiddenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HandlerErrNotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest HandlerErrMethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest HandlerErrGoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest HandlerErrRateLimitExceededResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HandlerErrInternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest HandlerErrServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetCompilationsIdArtifactsResponse parses an HTTP response from a GetCompilationsIdArtifactsWithResponse call
func ParseGetCompilationsIdArtifactsResponse(rsp *http.Response) (*GetCompilationsIdArtifactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompilationsIdArtifactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerArtifactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HandlerErrBadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HandlerErrUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HandlerErrForbiddenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HandlerErrNotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest HandlerErrMethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest HandlerErrGoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest HandlerErrRateLimitExceededResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HandlerErrInternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest HandlerErrServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostCompilationsIdCancelResponse parses an HTTP response from a PostCompilationsIdCancelWithResponse call
func ParsePostCompilationsIdCancelResponse(rsp *http.Response) (*PostCompilationsIdCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCompilationsIdCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerCompilationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HandlerErrBadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HandlerErrUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HandlerErrForbiddenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HandlerErrNotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest HandlerErrMethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest HandlerErrGoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest HandlerErrRateLimitExceededResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HandlerErrInternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest HandlerErrServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetCompilationsIdLogsResponse parses an HTTP response from a GetCompilationsIdLogsWithResponse call
func ParseGetCompilationsIdLogsResponse(rsp *http.Response) (*GetCompilationsIdLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompilationsIdLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HandlerLogsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest HandlerErrBadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest HandlerErrUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest HandlerErrForbiddenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest HandlerErrNotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest HandlerErrMethodNotAllowedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest HandlerErrGoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest HandlerErrRateLimitExceededResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HandlerErrInternalServerErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest HandlerErrServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
